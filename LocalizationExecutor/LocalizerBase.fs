module LocalizationExecutor.LocalizerBase

open FSharp.Data
open LocalizationExecutor.LocalizationCodeGen

type DefltCSVRow = CsvProvider<"./CSV/StructureGameStrings.csv">
let defaultCSVRowToRow (row: DefltCSVRow.Row) = 
        {
            key = row.Key
            locales = [ row.EN; row.JP ]
        }

///A default implementation of LGenCtx. Note that this assumes a CSV
/// structured exactly like ./CSV/StructureGameStrings.csv. If your
/// CSV is structured differently, override `loadRows` accordingly.
/// See LocalizerPolyglot for an example on overriding `loadRows`.
let defaultLCtx: LGenCtx = {
    loadRows = fun path -> 
        (DefltCSVRow.Load path).Rows
        |> Seq.map defaultCSVRowToRow
    localeSwitch = "Locales.Provider.TextLocale.Value"
    objectType = "object"
    locales = ["null"; "Locales.JP"]
    lsclass = Some ("LText", "LString")
    methodToLsSuffix = Some "_ls"
    lskeyprefix = "$SET BY FILEINFO"
    renderFunc = "Render"
    funcStandardizer = _.ToUpper()
    className = "LocalizedStrings"
    nestedClassName = "$NESTED CLASS WRITTEN BY FILE INFO"
    classAttribute = Some "LocalizationStringsRepo" 
    namespace_ = "$OVERWRITE NAMESPACE"
    outputHeader = """//----------------------
// <auto-generated>
//     Generated by Bagoum's Localization Utilities CSV Analysis.
//     Github project: https://github.com/Bagoum/localization-utils
// </auto-generated>
//----------------------

using System.Collections.Generic;
using BagoumLib.Culture;"""
}